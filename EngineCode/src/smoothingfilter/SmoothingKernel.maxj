package smoothingfilter;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.*;
import com.maxeler.maxcompiler.v2.utils.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.*;

class SmoothinKernel extends Kernel {

  protected SmoothinKernel(KernelParameters parameters) {
        super(parameters);

        DFEVar x = io.input("x", dfeFloat(8, 24));
        DFEVar sum = io.scalarInput("sum", dfeUInt(32));

        DFEVar prev = stream.offset(x, -1);
        DFEVar next = stream.offset(x, 1);

        DFEVar count = control.count.simpleCounter(32, size);

        DFEVar low = count > 0;
        DFEVar high = count < size - 1;

        DFEVar mid = low & high;

        DFEVar prev = low ? prevOrig : 0;
        DFEVar next = high ? nextOrig : 0;

        DFEVar divisor = mid ? constant.var(dfeFloat(8, 24), 3) : 2;

        DFEVar sum = prev + x + next;
        DFEVar result = sum / divisor;

        io.output("y", result, dfeFloat(8, 24));
    }
}
